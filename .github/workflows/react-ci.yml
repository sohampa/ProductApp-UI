name: React CI Pipeline

on:
  push:
    branches: [ "feature-Implement-CI-pipeline" ]
  pull_request:
    branches: [ "feature-Implement-CI-pipeline" ]

jobs:
  # 1. Code Checkout
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

  # 2. Setup Environment
  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Dependencies
        run: npm install

  # 3. Build React App
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Build React App
        run: CI=false npm run build

  # 4. Static Code Analysis
  static-analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 5. Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run npm audit
        run: npm audit --audit-level=moderate || echo "npm audit failed or not supported, skipping."

  # 6. Docker Build & Push
  docker:
    runs-on: ubuntu-latest
    needs: [static-analysis, security-scan]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tags
        id: vars
        run: |
          DATETIME_TAG=$(date +'%Y%m%d%H%M%S')
          SHA_TAG=${GITHUB_SHA::7}
          IMAGE=${{ secrets.DOCKER_USERNAME }}/react-app
          echo "datetime_tag=$DATETIME_TAG" >> $GITHUB_OUTPUT
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Backup old latest
        run: |
          IMAGE=${{ steps.vars.outputs.image }}
          DATETIME_TAG=${{ steps.vars.outputs.datetime_tag }}
          if docker pull $IMAGE:latest; then
            docker tag $IMAGE:latest $IMAGE:$DATETIME_TAG
            docker push $IMAGE:$DATETIME_TAG
          fi

      - name: Build and Push Docker Image
        run: |
          IMAGE=${{ steps.vars.outputs.image }}
          SHA_TAG=${{ steps.vars.outputs.sha_tag }}
          docker build -t $IMAGE:$SHA_TAG -t $IMAGE:latest .
          docker push $IMAGE:$SHA_TAG
          docker push $IMAGE:latest

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/react-app:latest
